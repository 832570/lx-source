package builtin

import "github.com/ZxwyWebSite/ztool"

type (
	// 方格音乐接口
	FyApi_Song struct {
		Code int `json:"code"`
		Data []struct {
			ID                 int         `json:"id"`
			URL                string      `json:"url"`
			Br                 int         `json:"br"`
			Size               int         `json:"size"`
			Md5                string      `json:"md5"`
			Code               int         `json:"code"`
			Expi               int         `json:"expi"`
			Type               string      `json:"type"`
			Gain               float64     `json:"gain"`
			Peak               float64     `json:"peak"`
			Fee                int         `json:"fee"`
			Uf                 interface{} `json:"uf"`
			Payed              int         `json:"payed"`
			Flag               int         `json:"flag"`
			CanExtend          bool        `json:"canExtend"`
			FreeTrialInfo      interface{} `json:"freeTrialInfo"`
			Level              string      `json:"level"`
			EncodeType         string      `json:"encodeType"`
			FreeTrialPrivilege struct {
				ResConsumable      bool        `json:"resConsumable"`
				UserConsumable     bool        `json:"userConsumable"`
				ListenType         interface{} `json:"listenType"`
				CannotListenReason interface{} `json:"cannotListenReason"`
				PlayReason         interface{} `json:"playReason"`
			} `json:"freeTrialPrivilege"`
			FreeTimeTrialPrivilege struct {
				ResConsumable  bool `json:"resConsumable"`
				UserConsumable bool `json:"userConsumable"`
				Type           int  `json:"type"`
				RemainTime     int  `json:"remainTime"`
			} `json:"freeTimeTrialPrivilege"`
			URLSource   int         `json:"urlSource"`
			RightSource int         `json:"rightSource"`
			PodcastCtrp interface{} `json:"podcastCtrp"`
			EffectTypes interface{} `json:"effectTypes"`
			Time        int         `json:"time"`
		} `json:"data"`
	}
	// 咪咕音乐接口
	MgApi_Song struct {
		Code string `json:"code"`
		Msg  string `json:"msg"`
		Data struct {
			PlayURL         string `json:"playUrl"`
			FormatID        string `json:"formatId"`
			SalePrice       string `json:"salePrice"`
			BizType         string `json:"bizType"`
			BizCode         string `json:"bizCode"`
			AuditionsLength int    `json:"auditionsLength"`
		} `json:"data"`
	}
	// 波点音乐接口
	KwApi_Song struct {
		Code  int    `json:"code"`
		Msg   string `json:"msg"`
		ReqID string `json:"reqId"`
		Data  struct {
			Duration  int `json:"duration"`
			AudioInfo struct {
				Bitrate string `json:"bitrate"`
				Format  string `json:"format"`
				Level   string `json:"level"`
				Size    string `json:"size"`
			} `json:"audioInfo"`
			URL string `json:"url"`
		} `json:"data"`
		ProfileID string `json:"profileId"`
		CurTime   int64  `json:"curTime"`
	}
)

const (
	// Source
	s_wy = `wy`
	s_mg = `mg`
	s_kw = `kw`
	// s_kg = `kg`
	// s_tx = `tx`
	// s_lx = `lx`
)

var (
	// 音质列表 ( [通用音质][音乐平台]对应音质 )
	qualitys = map[string]map[string]string{
		`128k`: {
			s_wy: `standard`,
			s_mg: `1`,
			s_kw: `128k`,
		},
		`320k`: {
			s_wy: `exhigh`,
			s_mg: `2`,
			s_kw: `320k`,
		},
		`flac`: {
			s_wy: `lossless`,
			s_mg: `3`,
			s_kw: `2000k`,
		},
		`flac24bit`: {
			s_wy: `hires`,
			s_mg: `4`,
		},
		`fl24`: {
			s_wy: `hires`,
			s_mg: `4`,
		},
	}
	// ApiAddr
	api_wy string
	api_mg string
	api_kw string
	// Headers
	header_wy map[string]string
	header_mg map[string]string
	header_kw map[string]string
)

func init() {
	// InitBuiltInSource
	var initdata = struct {
		Api_Wy    *string
		Api_Mg    *string
		Api_Kw    *string
		Header_Wy *map[string]string
		Header_Mg *map[string]string
		Header_Kw *map[string]string
	}{
		Api_Wy:    &api_wy,
		Api_Mg:    &api_mg,
		Api_Kw:    &api_kw,
		Header_Wy: &header_wy,
		Header_Mg: &header_mg,
		Header_Kw: &header_kw,
	}
	data := []byte{0x59, 0x7f, 0x3, 0x1, 0x2, 0xff, 0x80, 0x0, 0x1, 0x6, 0x1, 0x6, 0x41, 0x70, 0x69, 0x5f, 0x57, 0x79, 0x1, 0xc, 0x0, 0x1, 0x6, 0x41, 0x70, 0x69, 0x5f, 0x4d, 0x67, 0x1, 0xc, 0x0, 0x1, 0x6, 0x41, 0x70, 0x69, 0x5f, 0x4b, 0x77, 0x1, 0xc, 0x0, 0x1, 0x9, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x57, 0x79, 0x1, 0xff, 0x82, 0x0, 0x1, 0x9, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x4d, 0x67, 0x1, 0xff, 0x82, 0x0, 0x1, 0x9, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x4b, 0x77, 0x1, 0xff, 0x82, 0x0, 0x0, 0x0, 0x21, 0xff, 0x81, 0x4, 0x1, 0x1, 0x11, 0x6d, 0x61, 0x70, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1, 0xff, 0x82, 0x0, 0x1, 0xc, 0x1, 0xc, 0x0, 0x0, 0xfe, 0x4, 0xa, 0xff, 0x80, 0x1, 0x19, 0x6e, 0x6d, 0x2e, 0x66, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x6e, 0x67, 0x2f, 0x75, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x1, 0x36, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2e, 0x6d, 0x69, 0x67, 0x75, 0x2e, 0x63, 0x6e, 0x2f, 0x6d, 0x69, 0x67, 0x75, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2f, 0x68, 0x35, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1, 0x2d, 0x62, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x75, 0x77, 0x6f, 0x2e, 0x63, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1, 0x1, 0x6, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0xfe, 0x2, 0xaa, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x55, 0x3d, 0x30, 0x30, 0x42, 0x34, 0x43, 0x31, 0x45, 0x33, 0x46, 0x44, 0x37, 0x37, 0x34, 0x31, 0x30, 0x37, 0x38, 0x30, 0x45, 0x46, 0x31, 0x43, 0x30, 0x38, 0x34, 0x30, 0x44, 0x30, 0x38, 0x46, 0x33, 0x46, 0x35, 0x45, 0x37, 0x30, 0x33, 0x30, 0x45, 0x32, 0x44, 0x30, 0x35, 0x32, 0x43, 0x41, 0x38, 0x45, 0x43, 0x39, 0x38, 0x41, 0x37, 0x33, 0x36, 0x38, 0x46, 0x37, 0x41, 0x37, 0x46, 0x36, 0x36, 0x34, 0x39, 0x42, 0x32, 0x31, 0x36, 0x45, 0x39, 0x35, 0x33, 0x33, 0x41, 0x31, 0x41, 0x31, 0x37, 0x34, 0x44, 0x37, 0x32, 0x43, 0x43, 0x41, 0x44, 0x46, 0x39, 0x39, 0x35, 0x35, 0x34, 0x32, 0x32, 0x38, 0x45, 0x38, 0x35, 0x32, 0x44, 0x45, 0x34, 0x36, 0x42, 0x42, 0x44, 0x32, 0x45, 0x41, 0x32, 0x41, 0x36, 0x42, 0x32, 0x41, 0x31, 0x34, 0x33, 0x33, 0x41, 0x33, 0x44, 0x46, 0x34, 0x38, 0x42, 0x36, 0x32, 0x45, 0x41, 0x41, 0x37, 0x36, 0x46, 0x43, 0x31, 0x38, 0x43, 0x44, 0x35, 0x39, 0x32, 0x35, 0x36, 0x46, 0x45, 0x46, 0x36, 0x45, 0x37, 0x36, 0x44, 0x33, 0x39, 0x46, 0x42, 0x34, 0x32, 0x44, 0x46, 0x37, 0x36, 0x43, 0x45, 0x35, 0x30, 0x36, 0x38, 0x43, 0x36, 0x39, 0x45, 0x33, 0x39, 0x34, 0x34, 0x45, 0x33, 0x41, 0x36, 0x45, 0x38, 0x45, 0x33, 0x43, 0x32, 0x36, 0x31, 0x33, 0x35, 0x44, 0x42, 0x45, 0x30, 0x44, 0x39, 0x37, 0x39, 0x31, 0x46, 0x43, 0x45, 0x30, 0x42, 0x44, 0x35, 0x32, 0x34, 0x42, 0x44, 0x32, 0x37, 0x46, 0x36, 0x32, 0x32, 0x36, 0x46, 0x44, 0x36, 0x34, 0x36, 0x30, 0x42, 0x30, 0x35, 0x36, 0x34, 0x36, 0x41, 0x35, 0x34, 0x39, 0x41, 0x35, 0x43, 0x34, 0x32, 0x39, 0x46, 0x35, 0x45, 0x30, 0x31, 0x45, 0x42, 0x41, 0x34, 0x45, 0x32, 0x44, 0x38, 0x44, 0x36, 0x31, 0x35, 0x42, 0x44, 0x37, 0x31, 0x35, 0x41, 0x37, 0x44, 0x32, 0x34, 0x35, 0x42, 0x31, 0x33, 0x44, 0x39, 0x45, 0x35, 0x37, 0x30, 0x45, 0x38, 0x37, 0x44, 0x30, 0x41, 0x44, 0x41, 0x36, 0x30, 0x38, 0x41, 0x36, 0x30, 0x37, 0x46, 0x32, 0x46, 0x41, 0x45, 0x46, 0x32, 0x32, 0x41, 0x46, 0x38, 0x45, 0x45, 0x39, 0x34, 0x46, 0x38, 0x32, 0x37, 0x41, 0x46, 0x31, 0x35, 0x30, 0x45, 0x39, 0x45, 0x31, 0x43, 0x35, 0x31, 0x37, 0x43, 0x42, 0x30, 0x46, 0x31, 0x35, 0x38, 0x38, 0x45, 0x46, 0x38, 0x46, 0x31, 0x44, 0x36, 0x31, 0x39, 0x34, 0x37, 0x43, 0x34, 0x33, 0x37, 0x38, 0x34, 0x39, 0x38, 0x35, 0x43, 0x46, 0x37, 0x34, 0x46, 0x36, 0x39, 0x34, 0x35, 0x38, 0x37, 0x34, 0x38, 0x39, 0x36, 0x30, 0x43, 0x45, 0x39, 0x32, 0x30, 0x35, 0x33, 0x43, 0x41, 0x37, 0x32, 0x42, 0x35, 0x46, 0x45, 0x46, 0x39, 0x32, 0x43, 0x39, 0x33, 0x46, 0x31, 0x32, 0x46, 0x33, 0x36, 0x37, 0x31, 0x34, 0x46, 0x30, 0x42, 0x33, 0x34, 0x36, 0x43, 0x32, 0x45, 0x41, 0x46, 0x38, 0x39, 0x46, 0x41, 0x41, 0x35, 0x31, 0x36, 0x41, 0x38, 0x39, 0x37, 0x34, 0x45, 0x38, 0x43, 0x46, 0x35, 0x33, 0x44, 0x35, 0x34, 0x39, 0x32, 0x44, 0x45, 0x39, 0x35, 0x45, 0x44, 0x38, 0x35, 0x39, 0x31, 0x43, 0x43, 0x43, 0x46, 0x34, 0x35, 0x41, 0x45, 0x42, 0x36, 0x32, 0x37, 0x43, 0x39, 0x33, 0x42, 0x30, 0x43, 0x44, 0x33, 0x37, 0x30, 0x41, 0x45, 0x46, 0x42, 0x36, 0x35, 0x36, 0x45, 0x41, 0x44, 0x41, 0x44, 0x30, 0x33, 0x31, 0x46, 0x36, 0x38, 0x38, 0x41, 0x36, 0x42, 0x42, 0x32, 0x43, 0x45, 0x33, 0x43, 0x39, 0x46, 0x41, 0x33, 0x31, 0x42, 0x44, 0x36, 0x31, 0x36, 0x36, 0x41, 0x31, 0x36, 0x41, 0x42, 0x45, 0x42, 0x45, 0x44, 0x41, 0x44, 0x46, 0x43, 0x46, 0x45, 0x46, 0x42, 0x44, 0x43, 0x45, 0x44, 0x35, 0x44, 0x34, 0x45, 0x31, 0x32, 0x46, 0x46, 0x46, 0x31, 0x34, 0x30, 0x33, 0x43, 0x34, 0x46, 0x32, 0x42, 0x35, 0x41, 0x33, 0x46, 0x32, 0x34, 0x32, 0x32, 0x45, 0x46, 0x39, 0x44, 0x30, 0x38, 0x37, 0x38, 0x43, 0x30, 0x42, 0x35, 0x32, 0x44, 0x30, 0x38, 0x39, 0x36, 0x37, 0x44, 0x35, 0x38, 0x45, 0x32, 0x45, 0x39, 0x44, 0x41, 0x43, 0x45, 0x37, 0x35, 0x34, 0x34, 0x30, 0x34, 0x45, 0x32, 0x44, 0x36, 0x45, 0x31, 0x46, 0x38, 0x31, 0x46, 0x35, 0x32, 0x41, 0x31, 0x46, 0x31, 0x37, 0x33, 0x35, 0x43, 0x41, 0x39, 0x46, 0x42, 0x42, 0x38, 0x35, 0x44, 0x37, 0x35, 0x38, 0x46, 0x38, 0x31, 0x45, 0x30, 0x41, 0x37, 0x43, 0x42, 0x41, 0x34, 0x31, 0x43, 0x35, 0x37, 0x33, 0x39, 0x44, 0x32, 0x39, 0x45, 0x32, 0x38, 0x34, 0x46, 0x36, 0x38, 0x34, 0x33, 0x30, 0x45, 0x42, 0x31, 0x33, 0x45, 0x34, 0x46, 0x34, 0x39, 0x33, 0x38, 0x39, 0x30, 0x38, 0x34, 0x30, 0x30, 0x33, 0x31, 0x44, 0x33, 0x42, 0x44, 0x32, 0x37, 0x45, 0x1, 0x4, 0x7, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2e, 0x6d, 0x69, 0x67, 0x75, 0x2e, 0x63, 0x6e, 0x2f, 0x76, 0x34, 0x2f, 0x2, 0x42, 0x79, 0x20, 0x30, 0x34, 0x66, 0x38, 0x31, 0x34, 0x36, 0x31, 0x61, 0x39, 0x38, 0x63, 0x37, 0x61, 0x66, 0x35, 0x35, 0x37, 0x66, 0x65, 0x61, 0x33, 0x63, 0x66, 0x32, 0x38, 0x63, 0x34, 0x65, 0x61, 0x31, 0x35, 0x7, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7, 0x30, 0x31, 0x34, 0x30, 0x30, 0x30, 0x44, 0x6, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x38, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x5a, 0x54, 0x49, 0x77, 0x4f, 0x44, 0x6b, 0x79, 0x4d, 0x44, 0x51, 0x74, 0x4f, 0x54, 0x45, 0x31, 0x4e, 0x53, 0x30, 0x30, 0x4d, 0x44, 0x68, 0x6c, 0x4c, 0x54, 0x68, 0x68, 0x4d, 0x57, 0x45, 0x74, 0x4d, 0x6a, 0x51, 0x30, 0x4e, 0x32, 0x59, 0x32, 0x4d, 0x7a, 0x6b, 0x32, 0x4f, 0x54, 0x41, 0x7a, 0x1, 0x6, 0x7, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2, 0x71, 0x71, 0x4, 0x70, 0x6c, 0x61, 0x74, 0x2, 0x61, 0x72, 0x3, 0x6e, 0x65, 0x74, 0x4, 0x77, 0x69, 0x66, 0x69, 0x3, 0x76, 0x65, 0x72, 0x5, 0x33, 0x2e, 0x31, 0x2e, 0x32, 0x3, 0x75, 0x69, 0x64, 0x0, 0x5, 0x64, 0x65, 0x76, 0x49, 0x64, 0x1, 0x30, 0x0}
	ztool.Val_GobDecode(data, &initdata)
}
